searchState.loadedDescShard("massa_sc_runtime", 0, "Enum listing the available compilers\nVM execution error: {error}\nVM instance error: {0}\nThat’s what is returned when a module is executed …\nConvert a public key to an address\nCheck whether or not the caller has write access in the …\nUsed compiler for the current module\nRequires a new address that contains the sent &amp;u8\nDeserialize a RuntimeModule\nGet address from public key (EVM)\nGet public key from signature (EVM)\nVerify signature (EVM)\nFinish a call\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a smart contract event\nGenerate a smart contract event\nGet the SCE ledger balance for the current address. …\nGet the SCE ledger balance for an address. Defaults to …\nGet the amount of coins that have been made available for …\nGet the amount of coins that have been made available for …\nGet the native amount of coins that have been made …\nExpect to return a list of addresses in the call stack\nReturns the period of the current execution slot\nReturns the current execution slot\nReturns the thread of the current execution slot\nReturn datastore keys Will only return keys with a given …\nReturn datastore keys Will only return keys with a given …\nFor the given bytecode:\nReturn operation datastore data for a given key\nReturn operation datastore keys\nExpect to return a list of owned addresses\nReturns the current time (millisecond unix timestamp)\nCompile a temportary module from the given bytecode\nRequires to replace the data in the current address\nCheck if a datastore entry exists\nHash data\nReturns the blake3 hash of the given bytes\nPrepare the execution of a module at the given address and …\nPrepare the execution of a module at the given address and …\nnumber of gas required for the instance creation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the address is a User address, false if it …\nDispatch module creation corresponding to the first …\nCheck if operation in datastore exists\nPrint function for examples\nAppend a value to the current datastore value for the …\nAppend a value to the current datastore value for the …\nDelete a datastore entry\nDelete a datastore entry at of the given address\nReturns bytecode of the current address\nReturns bytecode of the target address\nReturn the datastore value of the corresponding key\nRequires the data at the address\nSets the executable bytecode at a current address.\nSets the executable bytecode at a target address. The …\nSet the datastore value for the corresponding key\nSet the datastore value for the corresponding key of the …\nnumber of gas that remain after the execution (metering)\nreturned value from the module call\nLibrary Input, take a <code>module</code> wasm built with the massa …\nLibrary Input, take a <code>module</code> wasm built with the massa …\nSends an async message\nSerialize a RuntimeModule, prepending its byte id\nVerify signature\nTransfer an amount from the address on the current call …\nTransfer an amount from the specified address to a target …\nReturns a random number (unsafe: can be predicted and …\nReturns a random number (unsafe: can be predicted and …\nReturns a random number (unsafe: can be predicted and …\nValidate an address")